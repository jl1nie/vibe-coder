#!/bin/bash

# Exit immediately if a command exits with a non-zero status.
set -e

# カラー出力
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# ヘルパー関数
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Function to print usage information
usage() {
  echo "Vibe Coder Management Script"
  echo
  echo "Usage: $0 {start|stop|logs|status|clean|dev|prod|setup|host-id|test|e2e} [options]"
  echo
  echo "Commands:"
  echo "  start   : Start Vibe Coder in production mode"
  echo "  dev     : Start in development mode (環境変数: .env.development)"
  echo "  prod    : Start in production mode (環境変数: .env.production)"
  echo "  stop    : Stop all services"
  echo "  logs    : Follow the logs of the services"
  echo "  status  : Show service status and health"
  echo "  host-id : Show or check the Host ID for connection"
  echo "  clean   : Stop services and remove containers/images"
  echo "  setup   : Setup environment and check configuration"
  echo "  test    : Run unit and integration tests (dev mode only)"
  echo "  e2e     : Run end-to-end tests (dev mode only)"
  echo
  echo "Developer Options:"
  echo "  dev --local : Start in local development mode (no Docker)"
  echo "  dev --docker: Start in Docker development mode"
  echo
  echo "Environment Variables:"
  echo "  HOST_UID/HOST_GID - Auto-detected from current user"
  echo "  Mode-specific env files: .env.development, .env.production"
}

# 環境設定（モード別）
setup_env() {
    local MODE="${1:-production}"
    
    # ホストのUID/GIDを自動設定
    export HOST_UID=$(id -u)
    export HOST_GID=$(id -g)
    
    log_info "Using HOST_UID=$HOST_UID, HOST_GID=$HOST_GID"
    
    # モード別環境変数ファイル
    local ENV_FILE=".env.$MODE"
    
    if [[ ! -f "$ENV_FILE" ]]; then
        log_error "Environment file not found: $ENV_FILE"
        log_info "Available environment files:"
        ls -la .env.* 2>/dev/null || log_warn "No environment files found"
        exit 1
    fi
    
    # 環境変数を読み込み
    log_info "Loading environment variables from $ENV_FILE"
    set -a
    source "$ENV_FILE"
    set +a
    
    # 必須環境変数の確認
    local required_vars=("VIBE_CODER_PORT" "VIBE_CODER_PWA_URL" "VIBE_CODER_SIGNALING_URL" "VIBE_CODER_CLAUDE_PATH" "VIBE_CODER_WORKSPACE_PATH")
    
    for var in "${required_vars[@]}"; do
        if [[ -z "${!var}" ]]; then
            log_error "Required environment variable $var is not set in $ENV_FILE"
            exit 1
        fi
    done
    
    log_success "Environment loaded: $MODE mode"
    log_info "PORT=$VIBE_CODER_PORT, PWA_URL=$VIBE_CODER_PWA_URL"
}

# 起動前チェック
check_requirements() {
    log_info "Checking requirements..."
    
    # Docker確認
    if ! command -v docker &> /dev/null; then
        log_error "Docker is not installed"
        exit 1
    fi
    
    # Claude設定確認
    if [[ ! -d "$HOME/.claude" ]]; then
        log_warn "Claude Code configuration not found at ~/.claude"
        log_info "Run: claude auth login"
    fi
    
    log_success "Requirements check passed"
}

# Host ID表示機能
show_host_id() {
    log_info "Checking Host ID..."
    
    # Host IDファイルを確認
    HOST_ID_FILE=".vibe-coder-host-id"
    
    if [[ -f "$HOST_ID_FILE" ]]; then
        HOST_ID=$(cat "$HOST_ID_FILE" 2>/dev/null | tr -d '\n\r' | head -c 8)
        if [[ "$HOST_ID" =~ ^[0-9]{8}$ ]]; then
            echo
            echo "╔════════════════════════════════════════╗"
            echo "║              VIBE CODER               ║"
            echo "║                                        ║"
            echo "║           Host ID: $HOST_ID            ║"
            echo "║                                        ║"
            echo "║  Open https://vibe-coder.space on your  ║"
            echo "║  phone and enter this Host ID           ║"
            echo "╚════════════════════════════════════════╝"
            echo
            log_success "Host ID: $HOST_ID (Ready for connection)"
        else
            log_warn "Invalid Host ID format in $HOST_ID_FILE"
            log_info "Please restart Vibe Coder to generate a new Host ID"
        fi
    else
        log_warn "Host ID file not found: $HOST_ID_FILE"
        log_info "Start Vibe Coder first to generate a Host ID"
        echo
        echo "Run: ./scripts/vibe-coder start"
    fi
}

# 起動後のHost ID表示
show_startup_info() {
    echo
    log_success "Vibe Coder started successfully!"
    echo
    show_host_id
}

# 開発者向けローカル起動
start_dev_local() {
    log_info "Starting Vibe Coder in local development mode..."
    setup_env "development"
    
    # 既存プロセス終了
    log_info "Stopping existing processes..."
    ps aux | grep "node.*vibe-coder" | grep -v grep | awk '{print $2}' | xargs -r kill 2>/dev/null || true
    docker ps | grep vibe-coder-host && docker stop vibe-coder-host || true
    
    # ビルド（環境変数変更を反映するため強制re-build）
    log_info "Building packages with environment variables..."
    pnpm build --force
    
    # ホストサーバー起動
    log_info "Starting host server on port $VIBE_CODER_PORT..."
    cd packages/host
    env \
        VIBE_CODER_PORT="$VIBE_CODER_PORT" \
        VIBE_CODER_WORKSPACE_PATH="$VIBE_CODER_WORKSPACE_PATH" \
        VIBE_CODER_SIGNALING_URL="$VIBE_CODER_SIGNALING_URL" \
        VIBE_CODER_CLAUDE_PATH="$VIBE_CODER_CLAUDE_PATH" \
        VIBE_CODER_PWA_URL="$VIBE_CODER_PWA_URL" \
        pnpm start &
    HOST_PID=$!
    cd ../..
    
    # シグナリングサーバー起動
    log_info "Starting signaling server on port $VIBE_CODER_PWA_PORT..."
    cd packages/signaling
    env \
        VIBE_CODER_PWA_PORT="$VIBE_CODER_PWA_PORT" \
        VIBE_CODER_SIGNALING_URL="$VIBE_CODER_SIGNALING_URL" \
        pnpm dev:vercel &
    SIGNALING_PID=$!
    cd ../..
    
    # 起動確認
    log_info "Waiting for services to start..."
    sleep 10
    
    if curl -s http://localhost:$VIBE_CODER_PORT/api/health > /dev/null 2>&1; then
        log_success "Host server is running on port $VIBE_CODER_PORT"
    else
        log_error "Host server failed to start"
        kill $HOST_PID $SIGNALING_PID 2>/dev/null || true
        exit 1
    fi
    
    if curl -s http://localhost:$VIBE_CODER_PWA_PORT > /dev/null 2>&1; then
        log_success "PWA server is running on port $VIBE_CODER_PWA_PORT"
    else
        log_error "PWA server failed to start"
        kill $HOST_PID $SIGNALING_PID 2>/dev/null || true
        exit 1
    fi
    
    log_success "Local development environment started!"
    echo
    echo "╔════════════════════════════════════════╗"
    echo "║          DEVELOPMENT MODE              ║"
    echo "║                                        ║"
    echo "║  Host Server: http://localhost:$VIBE_CODER_PORT     ║"
    echo "║  PWA Server:  http://localhost:$VIBE_CODER_PWA_PORT     ║"
    echo "║                                        ║"
    echo "║  Press Ctrl+C to stop all services    ║"
    echo "╚════════════════════════════════════════╝"
    echo
    
    # プロセス終了時のクリーンアップ
    trap 'log_info "Stopping services..."; kill $HOST_PID $SIGNALING_PID 2>/dev/null || true; exit 0' INT
    
    # フォアグラウンドで待機
    wait
}

# --- Main Script ---

# Check if a subcommand is provided
if [ -z "$1" ]; then
  usage
  exit 1
fi

# Navigate to the script's directory to ensure paths are correct
cd "$(dirname "$0")/.."

# Subcommand handling
case "$1" in
  start|prod)
    log_info "Starting Vibe Coder in production mode..."
    setup_env "production"
    check_requirements
    if [[ "$2" == "--no-build" ]]; then
      if [[ "$3" == "-d" || "$4" == "-d" ]]; then
        docker compose -f docker-compose.yml up --build -d
      else
        docker compose -f docker-compose.yml up --build
      fi
    else
      docker compose -f docker-compose.yml build
      if [[ "$2" == "-d" || "$3" == "-d" ]]; then
        docker compose -f docker-compose.yml up -d
      else
        docker compose -f docker-compose.yml up
      fi
    fi
    show_startup_info
    ;;
  dev)
    case "$2" in
      --local)
        start_dev_local
        ;;
      --docker|"")
        log_info "Starting Vibe Coder in Docker development mode..."
        setup_env "development"
        check_requirements
        export ENABLE_SECURITY=false
        export LOG_LEVEL=debug
        # Build once (no UID/GID needed at build time)
        docker compose -f docker-compose.yml build
        # Start with runtime UID/GID (passed via environment variables)
        docker compose -f docker-compose.yml up
        ;;
      *)
        log_error "Invalid dev option: $2"
        log_info "Use: dev --local or dev --docker"
        exit 1
        ;;
    esac
    ;;
  stop)
    log_info "Stopping Vibe Coder..."
    docker compose down
    log_success "Vibe Coder stopped"
    ;;
  logs)
    log_info "Following logs..."
    docker compose logs -f
    ;;
  status)
    log_info "Service status:"
    docker compose ps
    echo
    if curl -s http://localhost:8080/api/health > /dev/null 2>&1; then
        log_success "Service is healthy"
        curl -s http://localhost:8080/api/health | jq . 2>/dev/null || echo "Health check OK"
    else
        log_warn "Service is not responding"
    fi
    ;;
  host-id)
    show_host_id
    ;;
  clean)
    log_info "Cleaning up environment..."
    docker compose down --volumes --remove-orphans
    docker system prune -f
    log_success "Cleanup complete"
    ;;
  setup)
    setup_env "development"
    check_requirements
    log_success "Setup completed"
    ;;
  test)
    log_info "Running unit and integration tests (development mode only)..."
    setup_env "development"
    pnpm test
    log_success "Tests completed"
    ;;
  e2e)
    log_info "Running end-to-end tests (development mode only)..."
    setup_env "development"
    
    # サービスが起動しているかチェック
    if ! curl -s http://localhost:8080/api/health > /dev/null 2>&1; then
        log_warn "Host server not running, starting services..."
        
        # バックグラウンドで起動
        log_info "Building and starting services..."
        pnpm build
        pnpm --filter @vibe-coder/host start &
        HOST_PID=$!
        
        # サーバー起動を待機
        log_info "Waiting for host server to start..."
        for i in {1..30}; do
            if curl -s http://localhost:8080/api/health > /dev/null 2>&1; then
                log_success "Host server is ready"
                break
            fi
            sleep 2
            echo -n "."
        done
        echo
        
        if ! curl -s http://localhost:8080/api/health > /dev/null 2>&1; then
            log_error "Host server failed to start within 60 seconds"
            kill $HOST_PID 2>/dev/null || true
            exit 1
        fi
    else
        log_success "Host server is already running"
    fi
    
    # PWAサーバーが起動しているかチェック
    if ! curl -s http://localhost:5173 > /dev/null 2>&1; then
        log_info "Starting PWA server..."
        pnpm --filter @vibe-coder/web dev &
        PWA_PID=$!
        
        # PWAサーバー起動を待機
        log_info "Waiting for PWA server to start..."
        for i in {1..15}; do
            if curl -s http://localhost:5173 > /dev/null 2>&1; then
                log_success "PWA server is ready"
                break
            fi
            sleep 2
            echo -n "."
        done
        echo
        
        if ! curl -s http://localhost:5173 > /dev/null 2>&1; then
            log_error "PWA server failed to start within 30 seconds"
            kill $PWA_PID 2>/dev/null || true
            exit 1
        fi
    else
        log_success "PWA server is already running"
    fi
    
    # E2Eテスト実行
    log_info "Running Playwright E2E tests..."
    pnpm exec playwright test
    
    log_success "E2E tests completed"
    ;;
  *)
    usage
    exit 1
    ;;
esac
