#!/bin/bash

# Exit immediately if a command exits with a non-zero status.
set -e

# カラー出力
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# ヘルパー関数
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Function to print usage information
usage() {
  echo "Vibe Coder - Mobile Development Environment"
  echo
  echo "Usage: $0 {start|dev|stop|logs|status|host-id|clean} [options]"
  echo
  echo "Commands:"
  echo "  start   : Start Vibe Coder host server"
  echo "  dev     : Start in local development mode"
  echo "  stop    : Stop host server"
  echo "  logs    : Show server logs"
  echo "  status  : Show server status"
  echo "  host-id : Show connection Host ID"
  echo "  clean   : Stop and remove all containers"
  echo
  echo "Options:"
  echo "  -d      : Run in background (detached mode)"
}

# 環境設定（モード別）
setup_env() {
    local MODE="${1:-production}"
    
    # ホストのUID/GIDを自動設定
    export HOST_UID=$(id -u)
    export HOST_GID=$(id -g)
    
    log_info "Using HOST_UID=$HOST_UID, HOST_GID=$HOST_GID"
    
    # モード別環境変数ファイル
    local ENV_FILE=".env.$MODE"
    
    if [[ ! -f "$ENV_FILE" ]]; then
        log_error "Environment file not found: $ENV_FILE"
        log_info "Available environment files:"
        ls -la .env.* 2>/dev/null || log_warn "No environment files found"
        exit 1
    fi
    
    # 環境変数を読み込み
    log_info "Loading environment variables from $ENV_FILE"
    set -a
    source "$ENV_FILE"
    set +a
    
    # 必須環境変数の確認
    local required_vars=("VIBE_CODER_PORT" "VIBE_CODER_PWA_URL" "VIBE_CODER_SIGNALING_URL" "VIBE_CODER_HOST_URL" "VIBE_CODER_CLAUDE_PATH" "VIBE_CODER_WORKSPACE_PATH")
    
    for var in "${required_vars[@]}"; do
        if [[ -z "${!var}" ]]; then
            log_error "Required environment variable $var is not set in $ENV_FILE"
            exit 1
        fi
    done
    
    log_success "Environment loaded: $MODE mode"
    log_info "PORT=$VIBE_CODER_PORT, PWA_URL=$VIBE_CODER_PWA_URL"
}

# 起動前チェック
check_requirements() {
    log_info "Checking requirements..."
    
    # Docker確認
    if ! command -v docker &> /dev/null; then
        log_error "Docker is not installed"
        exit 1
    fi
    
    # Claude設定確認
    if [[ ! -d "$HOME/.claude" ]]; then
        log_warn "Claude Code configuration not found at ~/.claude"
        log_info "Run: claude auth login"
    fi
    
    log_success "Requirements check passed"
}

# Host ID表示機能
show_host_id() {
    log_info "Checking Host ID..."
    
    # Host IDファイルを確認
    HOST_ID_FILE=".vibe-coder-host-id"
    
    if [[ -f "$HOST_ID_FILE" ]]; then
        HOST_ID=$(cat "$HOST_ID_FILE" 2>/dev/null | tr -d '\n\r' | head -c 8)
        if [[ "$HOST_ID" =~ ^[0-9]{8}$ ]]; then
            echo
            echo "╔════════════════════════════════════════╗"
            echo "║              VIBE CODER               ║"
            echo "║                                        ║"
            echo "║           Host ID: $HOST_ID            ║"
            echo "║                                        ║"
            echo "║  Open https://vibe-coder.space on your  ║"
            echo "║  phone and enter this Host ID           ║"
            echo "╚════════════════════════════════════════╝"
            echo
            log_success "Host ID: $HOST_ID (Ready for connection)"
        else
            log_warn "Invalid Host ID format in $HOST_ID_FILE"
            log_info "Please restart Vibe Coder to generate a new Host ID"
        fi
    else
        log_warn "Host ID file not found: $HOST_ID_FILE"
        log_info "Start Vibe Coder first to generate a Host ID"
        echo
        echo "Run: ./scripts/vibe-coder start"
    fi
}

# 起動後のHost ID表示
show_startup_info() {
    echo
    log_success "Vibe Coder started successfully!"
    echo
    show_host_id
}

# ローカル開発モード起動
start_dev_local() {
    log_info "Starting Vibe Coder in local development mode..."
    setup_env "development"
    
    # 既存プロセス終了
    log_info "Stopping existing processes..."
    pkill -f "next dev.*5174" 2>/dev/null || true
    pkill -f "node.*vibe-coder.*host" 2>/dev/null || true
    sleep 2
    
    # ビルド
    log_info "Building packages..."
    pnpm build
    
    # Host Server起動 (Docker)
    log_info "Starting host server (Docker) on port 8080..."
    
    # 環境変数を明示的に設定
    export HOST_UID HOST_GID NODE_ENV VIBE_CODER_PORT VIBE_CODER_PWA_URL VIBE_CODER_SIGNALING_URL VIBE_CODER_HOST_URL VIBE_CODER_CLAUDE_PATH VIBE_CODER_WORKSPACE_PATH
    
    docker compose -f docker-compose.yml build
    docker compose -f docker-compose.yml up -d
    
    # Signaling + PWA Server起動 (ローカル)
    log_info "Starting signaling + PWA server on port 5174..."
    cd packages/signaling
    pnpm dev &
    SIGNALING_PID=$!
    cd ../..
    
    # 起動確認
    log_info "Waiting for services to start..."
    
    # Host Server確認
    for i in {1..30}; do
        if curl -s http://localhost:8080/api/health > /dev/null 2>&1; then
            log_success "Host server is running on port 8080"
            break
        fi
        sleep 2
        if [ $i -eq 30 ]; then
            log_error "Host server failed to start within 60 seconds"
            kill $SIGNALING_PID 2>/dev/null || true
            exit 1
        fi
    done
    
    # Signaling Server確認
    for i in {1..15}; do
        if curl -s http://localhost:5174 > /dev/null 2>&1; then
            log_success "Signaling + PWA server is running on port 5174"
            break
        fi
        sleep 2
        if [ $i -eq 15 ]; then
            log_error "Signaling server failed to start within 30 seconds"
            kill $SIGNALING_PID 2>/dev/null || true
            exit 1
        fi
    done
    
    echo
    echo "╔════════════════════════════════════════╗"
    echo "║          LOCAL TEST MODE               ║"
    echo "║                                        ║"
    echo "║  Host Server: http://localhost:8080    ║"
    echo "║  PWA Client:  http://localhost:5174    ║"
    echo "║                                        ║"
    echo "║  1. Open http://localhost:5174         ║"
    echo "║  2. Enter Host ID shown below          ║"
    echo "║  3. Complete 2FA authentication        ║"
    echo "║                                        ║"
    echo "║  Press Ctrl+C to stop all services    ║"
    echo "╚════════════════════════════════════════╝"
    echo
    show_host_id
    
    # プロセス終了時のクリーンアップ
    trap 'log_info "Stopping services..."; kill $SIGNALING_PID 2>/dev/null || true; docker compose down; exit 0' INT
    
    # フォアグラウンドで待機
    wait
}

# --- Main Script ---

# Check if a subcommand is provided
if [ -z "$1" ]; then
  usage
  exit 1
fi

# Navigate to the script's directory to ensure paths are correct
cd "$(dirname "$0")/.."

# Subcommand handling
case "$1" in
  start)
    log_info "Starting Vibe Coder host server..."
    setup_env "production"
    check_requirements
    
    # Build and start
    # 環境変数を明示的に設定
    export HOST_UID HOST_GID NODE_ENV VIBE_CODER_PORT VIBE_CODER_PWA_URL VIBE_CODER_SIGNALING_URL VIBE_CODER_HOST_URL VIBE_CODER_CLAUDE_PATH VIBE_CODER_WORKSPACE_PATH
    
    docker compose -f docker-compose.yml build
    if [[ "$2" == "-d" ]]; then
      docker compose -f docker-compose.yml up -d
    else
      docker compose -f docker-compose.yml up
    fi
    show_startup_info
    ;;
  dev)
    start_dev_local
    ;;
  stop)
    log_info "Stopping Vibe Coder..."
    # Docker containers
    docker compose down
    # Local processes
    pkill -f "next dev.*5174" 2>/dev/null || true
    pkill -f "node.*vibe-coder.*host" 2>/dev/null || true
    log_success "Vibe Coder stopped"
    ;;
  logs)
    log_info "Following logs..."
    docker compose logs -f
    ;;
  status)
    log_info "Service status:"
    docker compose ps
    echo
    if curl -s http://localhost:8080/api/health > /dev/null 2>&1; then
        log_success "Service is healthy"
        curl -s http://localhost:8080/api/health | jq . 2>/dev/null || echo "Health check OK"
    else
        log_warn "Service is not responding"
    fi
    ;;
  host-id)
    show_host_id
    ;;
  clean)
    log_info "Cleaning up environment..."
    docker compose down --volumes --remove-orphans
    docker system prune -f
    log_success "Cleanup complete"
    ;;
  *)
    log_error "Unknown command: $1"
    usage
    exit 1
    ;;
esac
