#!/bin/bash

# Exit immediately if a command exits with a non-zero status.
set -e

# カラー出力
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# ヘルパー関数
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Function to print usage information
usage() {
  echo "Vibe Coder Management Script"
  echo
  echo "Usage: $0 {start|stop|logs|status|clean|dev|prod|setup|host-id}"
  echo
  echo "Commands:"
  echo "  start   : Start Vibe Coder in production mode"
  echo "  dev     : Start in development mode"
  echo "  prod    : Start in production mode (same as start)"
  echo "  stop    : Stop all services"
  echo "  logs    : Follow the logs of the services"
  echo "  status  : Show service status and health"
  echo "  host-id : Show or check the Host ID for connection"
  echo "  clean   : Stop services and remove containers/images"
  echo "  setup   : Setup environment and check configuration"
  echo
  echo "Environment Variables:"
  echo "  HOST_UID/HOST_GID - Auto-detected from current user"
  echo "  All configuration files are saved in current directory (.vibe-coder-*)"
}

# 環境設定
setup_env() {
    # ホストのUID/GIDを自動設定
    export HOST_UID=$(id -u)
    export HOST_GID=$(id -g)
    
    log_info "Using HOST_UID=$HOST_UID, HOST_GID=$HOST_GID"
    
    # .envファイルの存在確認
    if [[ ! -f ".env" ]]; then
        log_warn ".env file not found, copying from .env.example"
        cp .env.example .env
        log_info "Please edit .env file with your configuration"
    fi
    
    # .envから環境変数を読み込み
    if [[ -f ".env" ]]; then
        set -a
        source .env
        set +a
    fi
}

# 起動前チェック
check_requirements() {
    log_info "Checking requirements..."
    
    # Docker確認
    if ! command -v docker &> /dev/null; then
        log_error "Docker is not installed"
        exit 1
    fi
    
    # Claude設定確認
    if [[ ! -d "$HOME/.claude" ]]; then
        log_warn "Claude Code configuration not found at ~/.claude"
        log_info "Run: claude auth login"
    fi
    
    log_success "Requirements check passed"
}

# Host ID表示機能
show_host_id() {
    log_info "Checking Host ID..."
    
    # Host IDファイルを確認
    HOST_ID_FILE=".vibe-coder-host-id"
    
    if [[ -f "$HOST_ID_FILE" ]]; then
        HOST_ID=$(cat "$HOST_ID_FILE" 2>/dev/null | tr -d '\n\r' | head -c 8)
        if [[ "$HOST_ID" =~ ^[0-9]{8}$ ]]; then
            echo
            echo "╔════════════════════════════════════════╗"
            echo "║              VIBE CODER                ║"
            echo "║                                        ║"
            echo "║          Host ID: $HOST_ID          ║"
            echo "║                                        ║"
            echo "║   スマホでhttps://vibe-coder.spaceを   ║"
            echo "║   開いてこのIDを入力してください       ║"
            echo "╚════════════════════════════════════════╝"
            echo
            log_success "Host ID: $HOST_ID (Ready for connection)"
        else
            log_warn "Invalid Host ID format in $HOST_ID_FILE"
            log_info "Please restart Vibe Coder to generate a new Host ID"
        fi
    else
        log_warn "Host ID file not found: $HOST_ID_FILE"
        log_info "Start Vibe Coder first to generate a Host ID"
        echo
        echo "Run: ./scripts/vibe-coder start"
    fi
}

# 起動後のHost ID表示
show_startup_info() {
    echo
    log_success "Vibe Coder started successfully!"
    echo
    show_host_id
}

# --- Main Script ---

# Check if a subcommand is provided
if [ -z "$1" ]; then
  usage
  exit 1
fi

# Navigate to the script's directory to ensure paths are correct
cd "$(dirname "$0")/.."

# Subcommand handling
case "$1" in
  start|prod)
    log_info "Starting Vibe Coder in production mode..."
    setup_env
    check_requirements
    # Build once (no UID/GID needed at build time)
    docker compose -f docker-compose.yml build
    # Start with runtime UID/GID (passed via environment variables)
    docker compose -f docker-compose.yml up -d
    show_startup_info
    ;;
  dev)
    log_info "Starting Vibe Coder in development mode..."
    setup_env
    check_requirements
    export ENABLE_SECURITY=false
    export LOG_LEVEL=debug
    # Build once (no UID/GID needed at build time)
    docker compose -f docker-compose.yml build
    # Start with runtime UID/GID (passed via environment variables)
    docker compose -f docker-compose.yml up
    ;;
  stop)
    log_info "Stopping Vibe Coder..."
    docker compose down
    log_success "Vibe Coder stopped"
    ;;
  logs)
    log_info "Following logs..."
    docker compose logs -f
    ;;
  status)
    log_info "Service status:"
    docker compose ps
    echo
    if curl -s http://localhost:8080/api/health > /dev/null 2>&1; then
        log_success "Service is healthy"
        curl -s http://localhost:8080/api/health | jq . 2>/dev/null || echo "Health check OK"
    else
        log_warn "Service is not responding"
    fi
    ;;
  host-id)
    show_host_id
    ;;
  clean)
    log_info "Cleaning up environment..."
    docker compose down --volumes --remove-orphans
    docker system prune -f
    log_success "Cleanup complete"
    ;;
  setup)
    setup_env
    check_requirements
    log_success "Setup completed"
    ;;
  *)
    usage
    exit 1
    ;;
esac
