name: 📚 Documentation Validation

on:
  push:
    branches: [ main, devel ]
    paths:
      - '**.md'
      - 'package.json'
      - '.env.example'
      - 'scripts/**'
      - '.github/workflows/**'
  pull_request:
    branches: [ main ]
    paths:
      - '**.md'
      - 'package.json'
      - '.env.example'
      - 'scripts/**'

jobs:
  validate-documentation:
    name: 📋 Validate Documentation
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: 🔧 Install dependencies
      run: npm ci
      
    - name: 📚 Validate documentation
      run: |
        ./scripts/doc-validator.sh validate
        
    - name: 📊 Upload validation report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: doc-validation-report
        path: .doc-validation-results.json
        retention-days: 30
        
    - name: 💬 Comment on PR
      if: github.event_name == 'pull_request' && failure()
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const path = '.doc-validation-results.json';
          
          if (fs.existsSync(path)) {
            const report = JSON.parse(fs.readFileSync(path, 'utf8'));
            const failed = report.results.filter(r => r.status === 'failed' || r.status === 'error');
            
            if (failed.length > 0) {
              let comment = '## 📚 Documentation Validation Failed\n\n';
              comment += `❌ ${failed.length} document(s) failed validation:\n\n`;
              
              failed.forEach(result => {
                comment += `### ${result.file}\n`;
                comment += `- **Status**: ${result.status}\n`;
                if (result.issues && result.issues.length > 0) {
                  comment += `- **Issues**:\n`;
                  result.issues.forEach(issue => {
                    comment += `  - ${issue}\n`;
                  });
                }
                comment += '\n';
              });
              
              comment += '### 🔧 How to fix:\n';
              comment += '1. Run `./scripts/doc-validator.sh validate` locally\n';
              comment += '2. Fix the identified issues\n';
              comment += '3. Update documentation to match current code state\n';
              comment += '4. Commit and push changes\n';
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            }
          }

  check-doc-freshness:
    name: 🕐 Check Documentation Freshness
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 100  # Get recent commit history
        
    - name: 🕐 Check documentation age
      run: |
        echo "Checking documentation freshness..."
        
        # Key documentation files
        docs=(
          "DEPLOYMENT_MANUAL.md"
          "CONFIG_DOCUMENTATION.md" 
          "UX_TEST_SUMMARY.md"
          ".env.example"
        )
        
        current_date=$(date +%s)
        warning_threshold=$((30 * 24 * 60 * 60))  # 30 days
        error_threshold=$((90 * 24 * 60 * 60))    # 90 days
        
        warnings=()
        errors=()
        
        for doc in "${docs[@]}"; do
          if [[ -f "$doc" ]]; then
            # Get last modification date
            last_modified=$(git log -1 --format="%ct" -- "$doc" 2>/dev/null || echo "0")
            age=$((current_date - last_modified))
            age_days=$((age / 86400))
            
            echo "📄 $doc: ${age_days} days old"
            
            if [[ $age -gt $error_threshold ]]; then
              errors+=("$doc is ${age_days} days old (>90 days)")
            elif [[ $age -gt $warning_threshold ]]; then
              warnings+=("$doc is ${age_days} days old (>30 days)")
            fi
          else
            errors+=("$doc not found")
          fi
        done
        
        # Report results
        if [[ ${#errors[@]} -gt 0 ]]; then
          echo "❌ Documentation freshness errors:"
          for error in "${errors[@]}"; do
            echo "  - $error"
          done
          exit 1
        elif [[ ${#warnings[@]} -gt 0 ]]; then
          echo "⚠️ Documentation freshness warnings:"
          for warning in "${warnings[@]}"; do
            echo "  - $warning"
          done
          echo "::warning::Some documentation may be outdated"
        else
          echo "✅ All documentation is fresh"
        fi

  link-checker:
    name: 🔗 Check Documentation Links
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🔗 Check markdown links
      uses: gaurav-nelson/github-action-markdown-link-check@v1
      with:
        use-quiet-mode: 'yes'
        use-verbose-mode: 'no'
        config-file: '.github/markdown-link-check-config.json'
        
  spell-checker:
    name: 📝 Spell Check Documentation
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 📝 Spell check
      uses: streetsidesoftware/cspell-action@v5
      with:
        files: |
          **/*.md
          !node_modules/**
          !.git/**
        config: '.github/cspell.json'
        incremental_files_only: false