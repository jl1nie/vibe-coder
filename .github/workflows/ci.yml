name: CI

on:
  push:
    branches: [main, devel]
  pull_request:
    branches: [main, devel]

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '8.15.5'

jobs:
  # === Dependencies Installation (Single Source of Truth) ===
  setup:
    name: Setup Dependencies
    runs-on: ubuntu-latest
    outputs:
      cache-key: ${{ steps.cache-key.outputs.key }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Generate cache key
        id: cache-key
        run: |
          echo "key=deps-${{ hashFiles('pnpm-lock.yaml', 'pnpm-workspace.yaml', '**/package.json') }}" >> $GITHUB_OUTPUT

      - name: Cache dependencies
        id: cache-deps
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            packages/*/node_modules
            apps/*/node_modules
            tools/*/node_modules
            ~/.pnpm-store
          key: ${{ steps.cache-key.outputs.key }}
          restore-keys: |
            deps-

      - name: Install dependencies
        if: steps.cache-deps.outputs.cache-hit != 'true'
        run: |
          pnpm config set store-dir ~/.pnpm-store
          pnpm install --frozen-lockfile

      - name: Upload node_modules
        uses: actions/upload-artifact@v4
        with:
          name: node-modules
          path: |
            node_modules
            packages/*/node_modules
            apps/*/node_modules
            tools/*/node_modules
          retention-days: 1

  # === Quality Checks ===
  lint:
    name: Lint & Format
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Download dependencies
        uses: actions/download-artifact@v4
        with:
          name: node-modules

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            packages/*/node_modules
            apps/*/node_modules
            tools/*/node_modules
            ~/.pnpm-store
          key: ${{ needs.setup.outputs.cache-key }}
          restore-keys: |
            deps-

      - name: Lint
        run: pnpm run lint

      - name: Format check
        run: pnpm run format

      - name: Type check
        run: pnpm run typecheck

  # === Unit Tests ===
  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Download dependencies
        uses: actions/download-artifact@v4
        with:
          name: node-modules

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            packages/*/node_modules
            apps/*/node_modules
            tools/*/node_modules
            ~/.pnpm-store
          key: ${{ needs.setup.outputs.cache-key }}

      - name: Run unit tests
        run: |
          export HOST_UID=$(id -u)
          export HOST_GID=$(id -g)
          pnpm test -- --coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

  # === Build ===
  build:
    name: Build Packages
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Download dependencies
        uses: actions/download-artifact@v4
        with:
          name: node-modules

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            packages/*/node_modules
            apps/*/node_modules
            tools/*/node_modules
            ~/.pnpm-store
          key: ${{ needs.setup.outputs.cache-key }}

      - name: Build packages
        run: pnpm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            packages/*/dist
            apps/*/dist
            apps/*/.next
          retention-days: 7

  # === Security Checks ===
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Download dependencies
        uses: actions/download-artifact@v4
        with:
          name: node-modules

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            packages/*/node_modules
            apps/*/node_modules
            tools/*/node_modules
            ~/.pnpm-store
          key: ${{ needs.setup.outputs.cache-key }}

      - name: Run security audit
        run: pnpm audit --audit-level high

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: javascript, typescript
          
      - name: Autobuild
        uses: github/codeql-action/autobuild@v2
        
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

  # === E2E Tests ===
  e2e:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: [setup, lint, test, build]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Download dependencies
        uses: actions/download-artifact@v4
        with:
          name: node-modules

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            packages/*/node_modules
            apps/*/node_modules
            tools/*/node_modules
            ~/.pnpm-store
          key: ${{ needs.setup.outputs.cache-key }}

      - name: Install Playwright Browsers
        run: npx playwright install --with-deps

      - name: Setup Docker for E2E tests
        run: |
          export HOST_UID=$(id -u)
          export HOST_GID=$(id -g)
          echo "HOST_UID=$HOST_UID" >> $GITHUB_ENV
          echo "HOST_GID=$HOST_GID" >> $GITHUB_ENV

      - name: Start Docker services for E2E tests
        run: |
          export HOST_UID=${{ env.HOST_UID }}
          export HOST_GID=${{ env.HOST_GID }}
          docker compose -f docker-compose.dev.yml up -d --build
          
          # Wait for services to be ready
          timeout 60 bash -c 'until curl -s http://localhost:8080/api/health >/dev/null; do sleep 2; done'
          timeout 30 bash -c 'until nc -z localhost 5175; do sleep 2; done'

      - name: Run E2E tests with proper environment
        run: |
          # Start PWA development server in background
          cd apps/web && npm run dev:test &
          PWA_PID=$!
          
          # Wait for PWA dev server to be ready
          timeout 30 bash -c 'until curl -s http://localhost:5174 >/dev/null; do sleep 2; done'
          
          # Run E2E tests
          pnpm test:e2e
          
          # Cleanup
          kill $PWA_PID || true

      - name: Stop Docker services
        if: always()
        run: |
          docker compose -f docker-compose.dev.yml down

      - name: Upload E2E test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-results
          path: |
            test-results/
            playwright-report/
          retention-days: 7

  # === Docker Build ===
  docker:
    name: Docker Build & Push
    runs-on: ubuntu-latest
    needs: [lint, test, build]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Vibe Coder image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          platforms: linux/amd64,linux/arm64
          tags: |
            jl1nie/vibe-coder:latest
            jl1nie/vibe-coder:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # === Production Deployment ===
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [e2e, docker]
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://vibe-coder.space
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Vercel CLI
        run: npm install -g vercel@latest

      - name: Deploy PWA to Vercel
        working-directory: ./apps/web
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PWA_PROJECT_ID }}
        run: |
          vercel pull --yes --environment=production --token=$VERCEL_TOKEN
          vercel build --prod --token=$VERCEL_TOKEN
          vercel deploy --prebuilt --prod --token=$VERCEL_TOKEN

      - name: Deploy Signaling Server to Vercel
        working-directory: ./packages/signaling
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_SIGNALING_PROJECT_ID }}
        run: |
          vercel pull --yes --environment=production --token=$VERCEL_TOKEN
          vercel build --prod --token=$VERCEL_TOKEN
          vercel deploy --prebuilt --prod --token=$VERCEL_TOKEN
          
      - name: Update deployment status
        run: |
          echo "✅ PWA deployed to https://vibe-coder.space"
          echo "✅ Signaling Server deployed to https://signal.vibe-coder.space"
          echo "✅ Docker Image pushed to jl1nie/vibe-coder:latest"

  # === Documentation Validation ===
  docs-validation:
    name: Documentation Validation
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 全履歴取得（変更分析用）

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Download dependencies
        uses: actions/download-artifact@v4
        with:
          name: node-modules

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            packages/*/node_modules
            apps/*/node_modules
            tools/*/node_modules
            ~/.pnpm-store
          key: ${{ needs.setup.outputs.cache-key }}

      - name: Run comprehensive documentation validation
        run: node scripts/validate-docs.js

      - name: Analyze documentation changes
        if: github.event_name == 'pull_request'
        run: |
          echo "📝 Analyzing documentation changes..."
          
          # 変更されたファイルを分析
          git diff --name-only origin/main...HEAD > changed-files.txt
          
          # ドキュメントファイルの変更をチェック
          if grep -E '\.(md|json)$' changed-files.txt; then
            echo "📄 Documentation files changed"
            echo "DOC_CHANGES=true" >> $GITHUB_ENV
          fi
          
          # 設定ファイルの変更をチェック
          if grep -E '(package\.json|pnpm-workspace\.yaml|\.env\.)' changed-files.txt; then
            echo "⚙️ Configuration files changed"
            echo "CONFIG_CHANGES=true" >> $GITHUB_ENV
          fi
          
          # API実装の変更をチェック
          if grep -E 'packages/.*/src/routes/.*\.ts$' changed-files.txt; then
            echo "🔌 API implementation changed"
            echo "API_CHANGES=true" >> $GITHUB_ENV
          fi

      - name: Check if documentation needs update
        if: github.event_name == 'pull_request'
        run: |
          NEEDS_DOC_UPDATE=false
          
          # APIが変更されたがドキュメントが更新されていない場合
          if [ "$API_CHANGES" = "true" ] && [ "$DOC_CHANGES" != "true" ]; then
            echo "⚠️ API changes detected but documentation not updated"
            NEEDS_DOC_UPDATE=true
          fi
          
          # 設定が変更されたがドキュメントが更新されていない場合
          if [ "$CONFIG_CHANGES" = "true" ] && [ "$DOC_CHANGES" != "true" ]; then
            echo "⚠️ Configuration changes detected but documentation not updated"
            NEEDS_DOC_UPDATE=true
          fi
          
          echo "NEEDS_DOC_UPDATE=$NEEDS_DOC_UPDATE" >> $GITHUB_ENV

      - name: Upload documentation validation report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: docs-validation-report
          path: docs-validation-report.json
          retention-days: 7

      - name: Comment PR with documentation analysis
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            let report = {};
            
            try {
              report = JSON.parse(fs.readFileSync('docs-validation-report.json', 'utf8'));
            } catch (error) {
              report = { summary: { errors: 0, warnings: 0 } };
            }
            
            const needsUpdate = process.env.NEEDS_DOC_UPDATE === 'true';
            const docChanges = process.env.DOC_CHANGES === 'true';
            const apiChanges = process.env.API_CHANGES === 'true';
            const configChanges = process.env.CONFIG_CHANGES === 'true';
            
            let body = '📚 **Documentation Validation Report**\n\n';
            
            // 検証結果サマリー
            body += `✅ **Validation Summary:**\n`;
            body += `- Errors: ${report.summary.errors}\n`;
            body += `- Warnings: ${report.summary.warnings}\n\n`;
            
            // 変更分析
            body += `📝 **Change Analysis:**\n`;
            body += `- Documentation files: ${docChanges ? '✅ Updated' : '❌ No changes'}\n`;
            body += `- API implementation: ${apiChanges ? '⚠️ Changed' : '✅ No changes'}\n`;
            body += `- Configuration files: ${configChanges ? '⚠️ Changed' : '✅ No changes'}\n\n`;
            
            // アクション推奨
            if (needsUpdate) {
              body += `🚨 **Action Required:**\n`;
              body += `Code changes detected that may require documentation updates. Please review and update relevant documentation files.\n\n`;
            }
            
            if (report.summary.errors > 0) {
              body += `❌ **Critical Issues Found:** Please review and fix errors before merging.\n`;
            } else if (report.summary.warnings > 0) {
              body += `⚠️ **Warnings Found:** Consider addressing these issues for better documentation quality.\n`;
            } else {
              body += `🎉 **All documentation validation checks passed!**\n`;
            }
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });

  # === Performance & Quality Gates ===
  performance:
    name: Performance & Quality Analysis
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts

      - name: Bundle size analysis
        run: |
          echo "📊 Analyzing bundle sizes..."
          find apps/*/dist -name "*.js" -type f | while read file; do
            size=$(stat -c%s "$file")
            echo "$(basename "$file"): ${size} bytes"
          done

      - name: Comment PR with performance metrics
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '📊 Performance analysis completed. Bundle sizes optimized for production deployment.'
            });