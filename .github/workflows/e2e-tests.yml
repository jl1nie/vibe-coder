name: 🧪 E2E Tests

on:
  push:
    branches: [main, devel]
  pull_request:
    branches: [main]
  # Allow manual trigger
  workflow_dispatch:

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '8.15.5'

jobs:
  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15

    strategy:
      matrix:
        browser: [chromium, firefox, webkit]
      fail-fast: false

    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 📚 Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            packages/*/node_modules
            apps/*/node_modules
            ~/.pnpm-store
          key: deps-${{ hashFiles('pnpm-lock.yaml', 'pnpm-workspace.yaml', '**/package.json') }}
          restore-keys: |
            deps-

      - name: 🚀 Install dependencies
        run: |
          pnpm config set store-dir ~/.pnpm-store
          pnpm install --frozen-lockfile

      - name: 🎭 Install Playwright Browsers
        run: npx playwright install --with-deps ${{ matrix.browser }}

      - name: 🐳 Setup Docker environment
        run: |
          export HOST_UID=$(id -u)
          export HOST_GID=$(id -g)
          echo "HOST_UID=$HOST_UID" >> $GITHUB_ENV
          echo "HOST_GID=$HOST_GID" >> $GITHUB_ENV

      - name: 🚢 Start Docker services
        run: |
          export HOST_UID=${{ env.HOST_UID }}
          export HOST_GID=${{ env.HOST_GID }}
          docker compose -f docker-compose.dev.yml up -d --build
          
          echo "⏳ Waiting for services to be ready..."
          timeout 90 bash -c 'until curl -s http://localhost:8080/api/health >/dev/null; do echo "Waiting for host server..."; sleep 3; done'
          timeout 60 bash -c 'until nc -z localhost 5175; do echo "Waiting for signaling server..."; sleep 2; done'
          
          echo "✅ Docker services are ready"

      - name: 🌐 Start PWA development server
        run: |
          cd apps/web
          npm run dev:test &
          PWA_PID=$!
          echo "PWA_PID=$PWA_PID" >> $GITHUB_ENV
          
          echo "⏳ Waiting for PWA dev server..."
          timeout 60 bash -c 'until curl -s http://localhost:5174 >/dev/null; do echo "Waiting for PWA..."; sleep 2; done'
          echo "✅ PWA development server is ready"

      - name: 🧪 Run E2E tests
        run: |
          echo "🚀 Running E2E tests with ${{ matrix.browser }}..."
          pnpm playwright test --project="${{ matrix.browser }}" --reporter=html

      - name: 🧹 Cleanup
        if: always()
        run: |
          echo "🧹 Cleaning up..."
          kill ${{ env.PWA_PID }} 2>/dev/null || true
          docker compose -f docker-compose.dev.yml down || true

      - name: 📊 Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-results-${{ matrix.browser }}
          path: |
            test-results/
            playwright-report/
          retention-days: 7

      - name: 📈 Upload test report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report-${{ matrix.browser }}
          path: playwright-report/
          retention-days: 30

  # Summary job that depends on all browser tests
  e2e-summary:
    name: E2E Test Summary
    runs-on: ubuntu-latest
    needs: e2e-tests
    if: always()
    
    steps:
      - name: 📋 Check test results
        run: |
          echo "🧪 E2E Test Results Summary"
          echo "=========================="
          
          # This will show the result of the matrix jobs
          if [ "${{ needs.e2e-tests.result }}" == "success" ]; then
            echo "✅ All E2E tests passed across all browsers!"
            echo "🎉 Ready for deployment"
          else
            echo "❌ Some E2E tests failed"
            echo "🔍 Check individual browser test results for details"
            exit 1
          fi

      - name: 💬 Comment on PR (if applicable)
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const result = '${{ needs.e2e-tests.result }}';
            const emoji = result === 'success' ? '✅' : '❌';
            const status = result === 'success' ? 'passed' : 'failed';
            
            const body = `## ${emoji} E2E Test Results
            
            **Status:** Tests **${status}** across all browsers
            
            ### Test Coverage:
            - 🖥️ **Desktop Chrome:** Authentication + Mobile UI + Command Execution
            - 🦊 **Firefox:** Cross-browser compatibility 
            - 🧭 **WebKit (Safari):** Mobile device simulation
            
            ### Key Features Tested:
            - 🔐 **Authentication Flow:** Host ID + TOTP 2FA
            - 📱 **Mobile UI:** Responsive design + Touch interactions
            - ⚙️ **Command Execution:** WebRTC connection + Interface navigation
            - 🔄 **Connection Management:** State handling + Recovery
            
            ${result === 'success' 
              ? '🚀 **All systems green!** Ready for deployment.' 
              : '🔍 **Action needed:** Please check failed tests and resolve issues.'}
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });